#!/usr/bin/env python3
import argparse
import getpass
import sys

import configparser
from ocflib.account.search import user_exists
from ocflib.infra.db import get_connection
from ocflib.misc.mail import send_mail
from pymysql.err import IntegrityError

MYSQL_CONFIG_FILE = 'mysql.conf'


def _db():
    conf = configparser.ConfigParser()
    conf.read(MYSQL_CONFIG_FILE)

    return get_connection(
        user=conf.get('mysql', 'user'),
        password=conf.get('mysql', 'password'),
        db=conf.get('mysql', 'db'),
    )


def _load_data():
    """Load student and lab data from MySQL."""

    with _db() as c:
        c.execute('SELECT `name`, `fullname`, `track` FROM `labs`')

        labs = {i['name']: {'fullname': i['fullname'], 'track': i['track']}
                for i in c}

        c.execute('SELECT `username`, `name`, `track` FROM `students`')

        roster = {i['username']: {'name': i['name'], 'track': i['track']}
                  for i in c}

    return {'labs': labs, 'roster': roster}


def checkoff(args, data):
    """Add a row to the db representing a lab checkoff."""

    lab = args.lab
    user = args.user
    facilitator = getpass.getuser()

    # verify the user is in the track they're being checked off for
    student_track = data['roster'][user]['track']
    lab_track = data['labs'][lab]['track']
    if student_track != lab_track:
        # returns into sys.exit, assert traceback is unnecessary
        return 'error: student in track {} but lab for track {}'.format(
            student_track, lab_track
        )

    try:
        with _db() as c:
            c.execute('INSERT INTO `checkoffs` (`lab`, `student`, `facilitator`)'
                      'VALUES (%s, %s, %s)', (lab, user, facilitator))

            _mail_checkoff(user, lab, data)
            print('Checked {} off for lab {} and emailed them confirmation.'.format(
                user, lab
            ))

    # multiple checkoffs not allowed by the unique constraint on the table
    except IntegrityError as e:
        print('Student probably already checked off.')
        return e


def lab_completed_students(args, data):
    """List which students have been checked off for a given lab."""

    lab = args.lab

    with _db() as c:
        c.execute('SELECT `student`, `facilitator`, `timestamp` FROM `checkoffs`'
                  'WHERE `lab` = %s', lab)

    print('Checkoffs for lab {} ({})'.format(lab, data['labs'][lab]['fullname']))

    for i in c:
        print('{} checked off by {} on {}'.format(
            i['student'], i['facilitator'], i['timestamp']
        ))


def student_completed_labs(args, data):
    """List which labs a given student has been checked off for."""

    user = args.user

    with _db() as c:
        c.execute('SELECT `lab`, `facilitator`, `timestamp` FROM `checkoffs`'
                  'WHERE `student` = %s', user)

    print('Checkoffs for student {} ({}) (track: {})'.format(
        data['roster'][user]['name'],  # full name
        user,                          # username
        data['roster'][user]['track'],
    ))

    for i in c:
        print('Lab {} checked off by {} on {}'.format(
            i['lab'],
            i['facilitator'],
            i['timestamp']
        ))


def _mail_checkoff(user, lab, data):
    msg = 'Congratulations {}, you have been checked off for lab {} ({})'.format(
        data['roster'][user]['name'].split()[0],
        lab,
        data['labs'][lab]['fullname'],
    )
    subject = 'Unix SysAdmin DeCal Checkoff for Lab {}'.format(lab)
    recipient = '{}@ocf.berkeley.edu'.format(user)
    cc = 'decal+checkoffs@ocf.berkeley.edu'
    sender = 'decal@ocf.berkeley.edu'

    send_mail(recipient, subject, msg, cc, sender)


def main(argv=None):
    data = _load_data()

    def validate_lab(lab):
        if lab in data['labs']:
            return lab
        else:
            raise argparse.ArgumentTypeError('Invalid lab: {}'.format(lab))

    def validate_user(user):
        if user in data['roster'] and user_exists(user):
            return user
        else:
            raise argparse.ArgumentTypeError(
                'Username {} not enrolled or does not exist'.format(user)
            )

    parser = argparse.ArgumentParser(
        description='Checkoff script for OCF/XCF UNIX SysAdmin DeCal.'
    )
    subparsers = parser.add_subparsers(dest='command', help='command to run')
    subparsers.required = True

    parser_view = subparsers.add_parser(
        'view', help='view a student\'s completed labs'
    )
    parser_view.add_argument(
        'user', type=validate_user, help='OCF username of the student'
    )
    parser_view.set_defaults(func=student_completed_labs)

    parser_labs = subparsers.add_parser(
        'labs',
        help='view students who have completed the specified lab'
    )
    parser_labs.add_argument(
        'lab', type=validate_lab, help='lab identifier (e.g. a1, b1)'
    )
    parser_labs.set_defaults(func=lab_completed_students)

    parser_checkoff = subparsers.add_parser(
        'checkoff', help='checkoff a student for a lab'
    )
    parser_checkoff.add_argument(
        'user', type=validate_user, help='OCF username of student'
    )
    parser_checkoff.add_argument(
        'lab', type=validate_lab, help='lab identifier (e.g. a1, b1)'
    )
    parser_checkoff.set_defaults(func=checkoff)

    args = parser.parse_args(argv)
    return args.func(args, data)


if __name__ == '__main__':
    sys.exit(main())
